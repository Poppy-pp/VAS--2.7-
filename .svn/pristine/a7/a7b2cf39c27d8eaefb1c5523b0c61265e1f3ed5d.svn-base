<template>
	<section class="tab_content-wrapper">
		<section class="layout">
			<div>
				<el-steps :space="260" process-status="finish" direction="vertical" style="margin: 30px 0 0 50px;" :active="active" finish-status="success">
					<el-step title="车辆"> </el-step>
					<el-step title="设备"></el-step>
					<el-step title="平台"></el-step>
					<el-step title="完成"></el-step>
				</el-steps>
			</div>

			<div style="width:80%;">
				<!-- 步骤一： -->
				<el-form :model="addForm" label-width="110px" :rules="addFormRules" ref="addForm" v-if="active == 0" class="step-form">
					<el-card :body-style="{ padding: '0px' }">
						<el-col :span="24">
							<span class="formTile">填写车辆及车主信息</span>
						</el-col>
						<el-row :gutter="80">
							<el-col :span="12">
								<el-form-item label="车牌号" prop="licenseplatenum" ref="licenseplatenum">
									<el-input v-model="addForm.licenseplatenum" auto-complete="off" @blur="checkout('licenseplatenum',addForm.licenseplatenum,0)"></el-input>
								</el-form-item>
								<el-form-item label="车架号" prop="vin" ref="vin">
									<el-input v-model="addForm.vin" auto-complete="off" @blur="checkout('vin',addForm.vin,1)"></el-input>
								</el-form-item>
								<el-form-item label="车价(元)" prop="price">
									<el-input v-model="addForm.price" auto-complete="off"></el-input>
								</el-form-item>
								<el-form-item label="车型" prop="model">
									<el-autocomplete class="inline-input searchInput" popper-class="my-autocomplete" v-model="addForm.model" :fetch-suggestions="handleItemChange" custom-item="my-item-zh-model" placeholder="请选择车型信息" @select="handleSelectModel"></el-autocomplete>
									<!--   <el-cascader :options="carModelList" filterable placeholder="请选择车型信息" change-on-select @change="handleItemChange" clearable :props="props">
				                            </el-cascader> -->
								</el-form-item>
								<el-form-item label="颜色" prop="colorname">
									<div style="display:flex;">
										<el-select v-model="addForm.colorname" clearable @change="changeCarColorAdd" style="flex:1;" placeholder="请选择车辆颜色">
											<el-option v-for="item in carColor" :key="item.color" :label="item.color" :value="item">
												<p>
													<div :style="{height:'20px',width:'20px',backgroundColor:item.color_rgb,float:'left',margin:'8px 5px 0 0'}"></div>{{ item.color }}</p>
											</el-option>
										</el-select>
										<el-color-picker style="width:60px;flex:0 0 60px;" v-model="addForm.color"></el-color-picker>
									</div>
								</el-form-item>
								<el-form-item label="发动机号" prop="enginenum">
									<el-input v-model="addForm.enginenum" auto-complete="off"></el-input>
								</el-form-item>
								<el-form-item label="车类型" prop="vehicletype">
									<el-select v-model="addForm.vehicletype" @visible-change="vehChange" :loading="vehLoading" filterable placeholder="请选择车类型" clearable>
										<el-option v-for="item in vehlist" :key="item.typedesc" :label="item.typedesc" :value="item.typedesc">
										</el-option>
									</el-select>
								</el-form-item>
								<el-form-item label="所属客户" prop="corpname">
									<el-select v-model="addForm.corpname" @visible-change="corpChange" :loading="corpLoading" filterable placeholder="请选择所属客户" clearable>
										<el-option v-for="item in corplist" :key="item.corpname" :label="item.corpname" :value="item.id + ''">
										</el-option>
									</el-select>
								</el-form-item>
								<el-form-item label="受理银行" prop="bankname">
									<el-select v-model="addForm.bankname" @visible-change="corpChangeTwo" :loading="corptwoLoading" filterable placeholder="请选择受理银行" clearable>
										<el-option v-for="item in corptwolist" :key="item.corpname" :label="item.corpname" :value="item.id">
										</el-option>
									</el-select>
								</el-form-item>
								<el-form-item label="是否有盗抢险" prop="hastheftinsurance">
									<el-switch v-model="addForm.hastheftinsurance" active-color="#00C1DE" inactive-color="#ff4949" active-value="1" active-text="有" inactive-value="0" inactive-text="无">
									</el-switch>
								</el-form-item>
								<div v-show="addForm.hastheftinsurance == '1'">
									<el-form-item label="服务期限(年)" prop="yearsofservice">
										<el-input v-model="addForm.yearsofservice" auto-complete="off"></el-input>
									</el-form-item>
									<el-form-item label="初始登记日期" prop="firstregisterdate">
										<el-date-picker v-model="addForm.firstregisterdate" type="date" placeholder="选择日期" :picker-options="pickerOptions">
										</el-date-picker>
									</el-form-item>
									<el-form-item label="贷款到期日" prop="loanenddate">
										<el-date-picker v-model="addForm.loanenddate" type="date" placeholder="选择日期" :picker-options="pickerOptions0">
										</el-date-picker>
									</el-form-item>
								</div>
							</el-col>
							<el-col :span="12">
								<el-form-item label="车主" prop="name">
									<el-autocomplete class="inline-input searchInput" v-model="addForm.name" :fetch-suggestions="querySearchName" placeholder="请输入车主姓名" :trigger-on-focus="false" @select="handleSelectName" clearable></el-autocomplete>
								</el-form-item>
								<el-form-item label="电话号码" prop="mobile">
									<el-input v-model="addForm.mobile" placeholder="请输入电话号码"></el-input>
								</el-form-item>
							</el-col>
						</el-row>
					</el-card>
				</el-form>

				<!-- 步骤二：-->
				<el-form :model="addForm" label-width="110px" :rules="addFormRules" ref="addForm1" v-if="active == 1" class="step-form">
					<el-card :body-style="{ padding: '0px' }">
						<el-col :span="24">
							<span class="formTile">绑定设备信息</span>
						</el-col>
						<el-row :gutter="80">
							<el-col :span="24">
								<el-form-item id="nomargin">
									<el-table :data="productsdatas" empty-text="暂无绑定设备" show-summary :summary-method="getSummaries" border style="width: 800px;" max-height="250">
										<el-table-column prop="prodnum" label="设备编号" align="center">
										</el-table-column>
										<el-table-column prop="prodmodel" label="设备型号" align="center">
										</el-table-column>
										<el-table-column prop="prodspec" label="设备类别" align="center">
										</el-table-column>
										<el-table-column prop="simnum" label="ICCID" align="center">
										</el-table-column>
										<el-table-column prop="storagename" label="库房" width="80" align="center">
										</el-table-column>
										<el-table-column prop="status" label="状态" :formatter="statusFormat" width="60" align="center">
										</el-table-column>
										<el-table-column label="操作" width="80" align="center">
											<template scope="scope">
												<el-button type="danger" size="small" icon="el-icon-share" class="mt5" @click.native="cancel(scope.$index,productsdatas)">解绑</el-button>
											</template>
										</el-table-column>
									</el-table>
									<el-button type="primary" @click.native="addDeviceList" icon="el-icon-plus" style="margin-top:10px;">添加绑定设备</el-button>
								</el-form-item>
							</el-col>
						</el-row>
					</el-card>
				</el-form>

				<!-- 步骤三： -->
				<el-form :model="addForm" label-width="110px" :rules="addFormRules" ref="addForm2" v-if="active == 2" class="step-form">
					<el-card :body-style="{ padding: '0px' }">
						<el-col :span="24">
							<span class="formTile">接入平台设置</span>
						</el-col>
						<el-row :gutter="80">
							<el-col :span="24">
								<el-form-item label="接入平台" prop="hasPlat">
									<el-switch v-model="addForm.hasPlat" active-color="#00C1DE" inactive-color="#ff4949" active-value="1" active-text="是" inactive-value="0" inactive-text="否">
									</el-switch>
								</el-form-item>
								<div v-show="addForm.hasPlat == '1'">
									<el-form-item label="平台名称" prop="platnameId">
										<el-select v-model="addForm.platnameId" @visible-change="platChange" @change="getIpAdd" :loading="platLoading" filterable placeholder="请选择平台名称" clearable>
											<el-option v-for="item in platlist" :key="item.platname" :label="item.platname" :value="item.ID">
											</el-option>
										</el-select>
									</el-form-item>
									<el-form-item label="平台IP" prop="platip">
										<el-input v-model="addForm.platip" disabled auto-complete="off" placeholder="自动匹配平台IP"></el-input>
									</el-form-item>
								</div>
							</el-col>
						</el-row>
					</el-card>
				</el-form>

				<!-- 步骤四：完成 -->
				<el-form :model="addForm" label-width="110px" :rules="addFormRules" ref="addForm3" v-if="active == 3" class="step-form">
					<div class="center"><i class='iconfont icon-chenggongjierutongguo'></i>新增成功</div>
					<div style="margin-top:10%;width:100%;">
						<el-row style="padding:0 40px;margin-bottom:20px;">
							<el-col :span="24">
								<span class="formTile">车辆信息</span>
							</el-col>
							<el-col :span="9">
								<dl class="dllist" style="margin-bottom:10px;">
									<dt>车牌号:</dt>
									<dd>{{ vehOwnerList.licenseplatenum }}</dd>
								</dl>
								<dl class="dllist" style="margin-bottom:10px;">
									<dt>车架号:</dt>
									<dd>{{ vehOwnerList.vin }}</dd>
								</dl>
								<dl class="dllist" style="margin-bottom:10px;">
									<dt>所属客户:</dt>
									<dd>{{ vehOwnerList.corpname }}</dd>
								</dl>
								<dl class="dllist" style="margin-bottom:10px;">
									<dt>车型:</dt>
									<dd>{{ vehOwnerList.model }}</dd>
								</dl>
								<dl class="dllist" style="margin-bottom:10px;">
									<dt>车价(元):</dt>
									<dd>{{ vehOwnerList.price }}</dd>
								</dl>
							</el-col>
							<el-col :span="10">
								<dl class="dllist" style="margin-bottom:10px;">
									<dt>车类型:</dt>
									<dd>{{ vehOwnerList.vehicletypename }}</dd>
								</dl>
								<dl class="dllist" style="margin-bottom:10px;">
									<dt>车颜色:</dt>
									<dd>{{ vehOwnerList.colorname }}</dd>
								</dl>
								<dl class="dllist" style="margin-bottom:10px;">
									<dt>发动机号:</dt>
									<dd>{{ vehOwnerList.enginenum }}</dd>
								</dl>
								<dl class="dllist" style="margin-bottom:10px;">
									<dt>受理银行:</dt>
									<dd>{{ vehOwnerList.bankname }}</dd>
								</dl>
							</el-col>
							<el-col :span="5">
								<dl class="dllist" style="margin-bottom:10px;">
									<dt>初始登记日期:</dt>
									<dd>{{ vehOwnerList.firstregisterdate == null ? "" :fmtdata.formatDate.format(new Date(vehOwnerList.firstregisterdate), 'yyyy-MM-dd') }}</dd>
								</dl>
								<dl class="dllist" style="margin-bottom:10px;">
									<dt>贷款到期日:</dt>
									<dd>{{ vehOwnerList.loanenddate == null ? "" :fmtdata.formatDate.format(new Date(vehOwnerList.loanenddate), 'yyyy-MM-dd') }}</dd>
								</dl>
								<dl class="dllist" style="margin-bottom:10px;">
									<dt>服务期限(年):</dt>
									<dd>{{ vehOwnerList.yearsofservice }}</dd>
								</dl>
								<dl class="dllist" style="margin-bottom:10px;">
									<dt>是否有盗抢险:</dt>
									<dd>{{ vehOwnerList.hastheftinsurance == 1 ? '是' : vehOwnerList.hastheftinsurance == 0 ? '否' : '' }}</dd>
								</dl>
							</el-col>
						</el-row>

						<el-row style="padding:10px 40px;margin-bottom:20px;">
							<el-col :span="24">
								<span class="formTile">车主信息</span>
							</el-col>
							<el-col :span="12">
								<dl class="dllist" style="margin-bottom:10px;">
									<dt>车主:</dt>
									<dd>{{vehOwnerList.name}}</dd>
								</dl>
							</el-col>
							<el-col :span="12">
								<dl class="dllist" style="margin-bottom:10px;">
									<dt>联系电话:</dt>
									<dd>{{vehOwnerList.mobile}}</dd>
								</dl>
							</el-col>
						</el-row>

						<el-row style="padding:10px 40px;margin-bottom:20px;"  v-show="packinfolist != ''">
							<el-col :span="24">
								<span class="formTile">设备信息</span>
							</el-col>
							<template v-for="(item,index) in packinfolist">
								<el-col :span="24" style="margin-top:10px;">
									<dl class="dllist" style="margin-bottom:10px;">
										<dt>设备:</dt>
										<dd>{{index+1}}</dd>
									</dl>
								</el-col>
								<el-col :span="8">
									<dl class="dllist" style="margin-bottom:10px;">
										<dt>设备编号:</dt>
										<dd>{{item.prodnum}}</dd>
									</dl>
									<dl class="dllist" style="margin-bottom:10px;">
										<dt>设备型号:</dt>
										<dd>{{item.prodmodel}}</dd>
									</dl>
								</el-col>
								<el-col :span="8">
									<dl class="dllist" style="margin-bottom:10px;">
										<dt>设备类别:</dt>
										<dd>{{item.prodspec}}</dd>
									</dl>
									<dl class="dllist" style="margin-bottom:10px;">
										<dt>ICCID:</dt>
										<dd>{{item.simnum}}</dd>
									</dl>
								</el-col>
								<el-col :span="8">
									<dl class="dllist" style="margin-bottom:10px;">
										<dt>库房:</dt>
										<dd>{{item.storagename}}</dd>
									</dl>
									<dl class="dllist" style="margin-bottom:10px;">
										<dt>状态:</dt>
										<dd>{{item.status == 'INSTO' ? '在库' : item.status == 'INSTALL' ? '已安装' : item.status == 'LOST' ? '报失' : item.status == 'REPAIR' ? '维修' : item.status == 'DAMAGE' ? '报废' : item.status == 'ONWAY' ? '在途' : '' }}</dd>
									</dl>
								</el-col>
							</template>
						</el-row>

						<el-row style="padding:10px 40px;margin-bottom:20px;" v-show="platData != ''">
							<el-col :span="24">
								<span class="formTile">平台信息</span>
							</el-col>
							<el-col :span="12">
								<dl class="dllist" style="margin-bottom:10px;">
									<dt>平台名称:</dt>
									<dd>{{platData.platname}}</dd>
								</dl>
							</el-col>
							<el-col :span="12">
								<dl class="dllist" style="margin-bottom:10px;">
									<dt>平台IP:</dt>
									<dd>{{platData.platip}}</dd>
								</dl>
							</el-col>
						</el-row>
					</div>
				</el-form>
			</div>
		</section>

		<el-button-group class="step-btn">
			<!-- 上一步按钮 -->
			<el-button type="primary" @click="prev" icon="el-icon-arrow-left" v-show="active > 0 && active < 3">上一步</el-button>
			<!-- 下一步按钮 -->
			<el-button type="primary" @click="next" v-show="active < 3">{{this.active == 2 ? '保存' : '下一步' }}<i class="el-icon-arrow-right el-icon--right"></i></el-button>
			<!-- 返回按钮 -->
			<el-button type="primary" @click="this.window.history.go(-1)">返回</el-button>
		</el-button-group>

		<!--设备列表选择界面-->
		<el-dialog title="设备信息" :modal-append-to-body="false" :visible.sync="deviceFormVisible" top="3%" :close-on-click-modal="false" @close="clearAllThis()">
			<el-col :span="24" class="toolbar" style="padding-bottom: 0px;">
				<el-form :inline="true" :model="filters">
					<template v-for="(item,index) in filters.domSearch">
						<template v-if="index == 0">
							<div style="display:inline-block;margin:0 10px 10px 0;">
								<el-input class="noborder color icon nofocus" @keyup.native.ctrl.8="clearAll()" @keyup.native.enter="getDeciceListInfo" placeholder="请输入查询内容" v-model="filters.domSearch[index].content">
									<el-select class="wp_select" multiple clearable filterable v-model="filters.domSearch[index].select" slot="prepend" placeholder="选择条件">
										<el-option label="设备编号" value="prodnum"></el-option>
										<el-option label="设备型号" value="prodmodel"></el-option>
										<el-option label="设备类别" value="prodspec"></el-option>
										<el-option label="库房" value="storagename"></el-option>
									</el-select>
									<template v-if="index == filters.domSearch.length-1">
										<el-button slot="append" @click="addSelect" icon="el-icon-plus" title="添加查询条件"></el-button>
									</template>
									<template v-else>
										<el-button slot="append" @click="removeSelect(index)" icon="el-icon-minus" title="移除查询条件"></el-button>
									</template>
								</el-input>
							</div>
						</template>
						<template v-else>
							<el-col :span="24">
								<div style="display:inline-block;margin:0 10px 10px 0;">
									<el-input class="noborder color icon nofocus" @keyup.native.ctrl.8="clearAll()" @keyup.native.enter="getDeciceListInfo" placeholder="请输入查询内容" v-model="filters.domSearch[index].content">
										<el-select class="wp_select" multiple clearable filterable v-model="filters.domSearch[index].select" slot="prepend" placeholder="选择条件">
											<el-option label="设备编号" value="prodnum"></el-option>
											<el-option label="设备型号" value="prodmodel"></el-option>
											<el-option label="设备类别" value="prodspec"></el-option>
											<el-option label="库房" value="storagename"></el-option>
										</el-select>
										<template v-if="index == filters.domSearch.length-1">
											<el-button slot="append" @click="addSelect" icon="el-icon-plus" title="添加查询条件"></el-button>
										</template>
										<template v-else>
											<el-button slot="append" @click="removeSelect(index)" icon="el-icon-minus" title="移除查询条件"></el-button>
										</template>
									</el-input>
								</div>
							</el-col>
						</template>

						<template v-if="index == 0">
							<el-form-item>
								<el-button type="primary" @click="getDeciceListInfo" icon="el-icon-search">查询</el-button>
							</el-form-item>
						</template>
					</template>
				</el-form>
			</el-col>
			<!--选择设备列表-->
			<el-table border :data="deviceListData" max-height="500" ref="deviceListData" highlight-current-row v-loading="devicelistLoading" @select="selsChange" style="width: 100%;">
				<el-table-column type="selection" fixed="left" width="50" align="center">
				</el-table-column>
				<el-table-column prop="prodnum" label="设备编号" align="center">
				</el-table-column>
				<el-table-column prop="prodmodel" label="设备型号" align="center">
				</el-table-column>
				<el-table-column prop="prodspec" label="设备类别" width="70" align="center">
				</el-table-column>
				<el-table-column prop="simnum" label="ICCID" align="center">
				</el-table-column>
				<el-table-column prop="storagename" label="库房" align="center">
				</el-table-column>
				<el-table-column prop="status" label="状态" :formatter="statusFormat" width="60" align="center">
				</el-table-column>
			</el-table>

			<!--工具条-->
			<el-col :span="24" class="toolbar">
				<el-button type="primary" class="mt5" @click="comlist" :loading="comfirLoadingVeh" :disabled="this.sels.length===0">确认绑定</el-button>
				<el-pagination @size-change="dhandleSizeChange" background @current-change="dhandleCurrentChange" :page-sizes="[15, 50, 80, 100]" :page-size="dpageSize" layout="total, sizes, prev, pager, next" :total="dtotal" style="float:right;margin-top:10px;">
				</el-pagination>
			</el-col>
		</el-dialog>

		<!-- <el-button type="primary" @click.native="addSubmit" :loading="addLoading">提交</el-button> -->

	</section>
</template>

<script>
	import util from '../../common/js/util';
	import nanobar from '../../common/js/nanobar';
	import { getOwnerInfoList, getVehList, getCorpList, getVehicleProd, getPlatList, addVehOwnerList, bandVehicleProd, unBandVehicleProd, addPlatProd, getModelListInfo, getModelListInfo1, getCheckoutOfVehicleInfo,getCorpNameList } from '../../api/api';

	export default {
		data() {
			// 验证手机
			var checkMobile = (rule, value, callback) => {
				var reg = /^1\d{10}$/g,
					flag = reg.test(value);
				if(!flag) {
					return callback(new Error('请输入11位的手机号码'));
				} else {
					callback();
				}
			};
			//验证车架号(只能输入数字和字母)
			var checkVin = (rule, value, callback) => {
				var reg = /^(?![0-9]+$)(?![a-zA-Z]+$)[0-9A-Za-z]*$/g,
					flag = reg.test(value);
				if(!flag) {
					return callback(new Error('车架号必须为数字和字母组成'));
				} else {
					callback();
				}
			};
			//验证车价(只能输入数字)
			var checkPrice = (rule, value, callback) => {
				var reg = /^\d+(\.\d{1,2})?$/g,
					flag = reg.test(value);
				if(!flag) {
					return callback(new Error('车价须大于或等于0,小数保留两位'));
				} else {
					callback();
				}
			};
			//验证中文
			var checkChinese = (rule, value, callback) => {
				var reg = /^[\u4e00-\u9fa5]+$/g,
					flag = reg.test(value);
				if(!flag) {
					return callback(new Error('只能输入中文'));
				} else {
					callback();
				}
			};
			//验证车牌号
			var checkVehicleNumber = (rule, value, callback) => {
				if ($.trim(value).length == 8){//新能源汽车
					// var reg = /^[京津沪渝冀豫云辽黑湘皖鲁新苏浙赣鄂桂甘晋蒙陕吉闽贵粤青藏川宁琼使领A-Z]{1}[A-Z]{1}(([0-9]{5}[DF])|([DF][A-HJ-NP-Z0-9][0-9]{4}))$/;
					var reg = /^[\u4e00-\u9fa5]{1}[A-Z]{1}[A-Z_0-9]{6}$/;
				}else{//普通汽车
					var reg = /^[京津沪渝冀豫云辽黑湘皖鲁新苏浙赣鄂桂甘晋蒙陕吉闽贵粤青藏川宁琼使领A-Z]{1}[A-Z]{1}[A-HJ-NP-Z0-9]{4}[A-HJ-NP-Z0-9挂学警港澳]{1}$/;
				}

				var flag = reg.test(value);
				if($.trim(value) == '') {
					callback();
					return;
				}
				if(!flag) {
					return callback(new Error('车牌号格式不规范'));
				} else {
					callback();
				}
			};
			return {
				filters: {
					domSearch: [{
						select: [],
						content: ''
					}], //查询框
					isdelete: '0',
				},
				checkList: [],
				checkoutDataT: true, //数据验证返回的布尔值true
				checkoutDataF: [], //数据验证组
				thisInput: [], //编辑时存入row验证的值
				fmtdata: util,
				corpOptions: [{
					value: '0',
					label: '集团'
				}, {
					value: '1',
					label: '分公司'
				}, {
					value: '2',
					label: '子公司'
				}, {
					value: '3',
					label: '门店'
				}],
				value: '',
				isIndeterminate: true,
				checkAll: true,
				checkedCities: [],
				cities: [],
				active: 0, //步骤
				prOptions: util.initProvince(),
				pickerOptions0: { //贷款到期日
					disabledDate(time) {
						return time.getTime() < Date.now() - 8.64e7;
					}
				},
				pickerOptions: { //车辆初始登记日期
				},
				listData: [],
				comfirLoadingVeh: false,
				carModelList: [], //车型信息
				props: { //显示车型
					value: 'value',
					label: 'label',
					children: 'children'
				},
				vehlist: [], //车类型列表
				vehLoading: false, //车类型
				namelist: [], //车主姓名列表
				nameLoading: false, //车主姓名
				corplist: [], //所属客户
				corpLoading: false, //
				corptwolist: [], //受理银行
				corptwoLoading: false, //
				prodDataID: [], //新增——已选绑定设备的id列表
				deviceListData: [], //设备列表
				productsdatas: [], //当前详情车主所持的车辆信息
				vehicleidList: {}, //当前行的车辆id
				dtotal: 0,
				dcurrentPage: 1,
				dpageSize: 15,
				deviceFormVisible: false,
				devicelistLoading: false,
				checkData: [], //选择绑定check
				platlist: [], //绑定平台
				platLoading: false, //
				vehOwnerList: {}, //添加车辆车主后返回的数据
				platData: [], //添加平台后返回的数据
				prodDataID: [], //绑定多个设备的id组
				packinfolist: [], //多选时选择的组
				total: 0,
				currentPage: 1,
				listLoading: false,
				sels: [], //列表选中列
				pageSize: 15,
				addLoading: false,
				addFormRules: {
					name: [{required: true,message: '请输入车主',trigger: 'blur'},{validator: checkChinese,trigger: 'blur'}],
					vin: [{
							required: true,
							message: "请输入车架号",
							trigger: 'blur'
						},
						{
							validator: checkVin,
							trigger: 'blur'
						}
					],
					mobile:[{
							required: true,
							message: "请输入手机号",
							trigger: 'blur'
						},
						{
							validator: checkMobile,
							trigger: 'blur'
					}],
					price: [{
							required: true,
							message: "请输入车价",
							trigger: 'blur'
						},
						{
							validator: checkPrice,
							trigger: 'blur'
						}
					],
					licenseplatenum: [{required: true,message: '请输入车牌号',trigger: 'blur'},{validator: checkVehicleNumber,trigger: 'blur'}],
					model: [{
						required: true,
						message: "请输入车型",
						trigger: 'change'
					}],
					vehicletype: [{
						required: true,
						message: "请选择车类型",
						trigger: 'blur'
					}],
					corpname: [{
						required: true,
						message: "请选择所属客户",
						trigger: 'blur'
					}],
				},
				//新增界面数据
				addForm: {
					licenseplatenum: '',
					vin: '',
					enginenum: '',
					price: '',
					model: '',
					color: '#000',
					colorname: '',
					firstregisterdate: '',
					vehicletype: '',
					corpname: '',
					bankname: '',
					hastheftinsurance: '0',
					generalproductcount: '',
					yearsofservice: '',
					loanenddate: '',
					isdelete: 0,
					productsNum: '',

					ownerid: '',
					name: '',
					mobile: '',

					hasPlat: '1',
					platname: '',
					platip: '',
					platnameId: '',
					platid: '',
				},
				carColor: []
			}
		},
		methods: {
			// 数据重复验证
			checkout(p, v, index) {
				if(v == "") return;
				if(this.thisInput[index] == v) return; //编辑时 没改输入框值
				this.checkoutDataT = true; //初始化
				let paras = {
					para: p,
					value: v,
				}
				getCheckoutOfVehicleInfo(paras).then((res) => {
					let errorInput = res.data.data.param; //保存验证失败的字段
					if(!res.data.data.result) {
						this.$message({
							message: '信息输入重复！',
							type: 'warning'
						});
						this.$refs[errorInput].$el.className = "el-form-item is-required is-error el-form-item--medium"; //输入框标红
						this.checkoutDataF[index] = false
					} else {
						this.$refs[errorInput].$el.className = "el-form-item is-required el-form-item--medium"; //输入框恢复
						this.checkoutDataF[index] = true
					}
				});
			},
			// 上一步按钮
			prev() {
				if(this.active-- < 1) this.active = 0;
				$(".is-error").removeClass('is-error'); //清空验证时的红框
			},
			// 下一步按钮
			next() {
				if(this.active == 0) { //添加车辆车主
					this.checkoutDataF.forEach((item, index) => {
						this.checkoutDataT = item && this.checkoutDataT;
					});

					this.$refs.addForm.validate((valid) => { //启动验证
						if(valid) {
							this.thisInput.push(this.addForm.licenseplatenum, this.addForm.vin); //将当前验证的字段 已获得的值存入

							let para = {
								ownerid: this.addForm.ownerid,
								ownerInfo: {
									name: this.addForm.name,
									mobile: this.addForm.mobile,
									id: this.vehOwnerList.ownerid
								},
								// 车辆信息
								licenseplatenum: this.addForm.licenseplatenum,
								vin: this.addForm.vin,
								enginenum: this.addForm.enginenum,
								price: this.addForm.price,
								model: this.addForm.model,
								color: this.addForm.color,
								colorname: this.addForm.colorname,
								firstregisterdate: this.addForm.firstregisterdate,
								vehicletype: this.addForm.vehicletype,
								corpid: this.addForm.corpname,
								receivingbankid: this.addForm.bankname,
								hastheftinsurance: parseInt(this.addForm.hastheftinsurance),
								generalproductcount: this.addForm.generalproductcount,
								yearsofservice: this.addForm.yearsofservice,
								loanenddate: this.addForm.loanenddate,
								isdelete: 0,
								id: this.vehOwnerList.ID,
							}
							if(this.checkoutDataT) { //验证通过时(无重复时)
								addVehOwnerList(para).then((res) => {
									console.log(res)
									this.vehOwnerList = res.data.data.records[0];
									this.active = 1;
								});
							} else {
								this.addLoading = false;
								this.$message({
									message: '标红信息已存在！',
									type: 'warning'
								});
							}
						}
					});
				}
				if(this.active == 2) {
					this.productsdatas.forEach((item, index) => {
						this.prodDataID.push({
							id: item.prodid
						});
					});
					
					let para = {
						vehicleid: this.vehOwnerList.ID,
						platid: this.addForm.platid,
						productInfo: this.prodDataID,
					} 

					if (this.addForm.hasPlat == 1) {//选择接入平台时
						if(this.addForm.platid == '' || this.addForm.platid == null){
							this.$message({
								message: '请选择接入平台名称',
								type: 'error'
							});
							return;
						}
					}else if(this.addForm.hasPlat == 0) {//不接入平台时
						this.active = 3;
						return;
					}

					addPlatProd(para).then((res) => {
						this.active = 3;
						this.platData = res.data.data.plat;
					});
				}
				if(this.active == 1) {
					this.active = 2;
				}
			},
			// 多选框 选择设备时
			selsChange(sels, row) {
				this.sels = sels;
				this.packinfolist = this.sels;

				this.checkData = row;
			},
			// 解绑
			cancel(index, rows) {
				let row = rows[index];
				this.$confirm('确认解除该设备的绑定关系吗？', '提示', {
					type: 'warning'
				}).then(() => {
					let para = {
						id: row.onlickid,
						packid: row.packid,
						packinfo: {
							equipmentid: row.prodid,
							simcardid: row.simcardid,
							storageid: row.storageid,
						}
					};
					unBandVehicleProd(para).then((res) => {
						rows.splice(index, 1); //删除一行
					});
				}).catch(() => {});
			},
			//绑设备时确认绑定
			comlist() {
				this.deviceFormVisible = false;
				this.$refs.deviceListData.clearSelection();

				let para = {
					packid: this.checkData.ID,
					vehicleid: this.vehOwnerList.ID,
					packinfos: []
				};
				this.comfirLoadingVeh = true;
				this.packinfolist.forEach((res, index) => {
					para.packinfos.push({
						ID: res.ID,
						equipmentid: res.prodid,
						simcardid: res.simid,
						storageid: res.storageid,
					});
				})
				bandVehicleProd(para).then((res) => {
					this.comfirLoadingVeh = false;
					this.productsdatas = res.data.data.records;
				});
			},

			// 添加查询条件
			addSelect() {
				this.filters.domSearch.push({
					select: [],
					content: ''
				});
			},
			// 移除查询条件
			removeSelect(index) {
				this.filters.domSearch.splice(index, 1); //从当前index位置开始，删除一项
			},
			//切换当前页
			dhandleCurrentChange(val) {
				this.dcurrentPage = val;
				this.getDeciceListInfo();
			},
			//切换每页显示数量
			dhandleSizeChange(val) {
				this.dpageSize = val;
				this.getDeciceListInfo();
			},
			// 获取设备信息
			addDeviceList() {
				this.deviceFormVisible = true;
				this.filters.domSearch = [{
					select: ['prodnum'],
					content: ''
				}];
				this.getDeciceListInfo();
			},
			//获取设备信息
			getDeciceListInfo() {
				let para = {
					currentPage: this.dcurrentPage,
					showCount: this.dpageSize,
					domSearch: this.filters.domSearch,
					isactive: 1,
					status: 'INSTO'
				};
				this.devicelistLoading = true;
				getVehicleProd(para).then((res) => {
					if(res.data.result.code == 4001) {
						this.$message({
							message: res.data.result.desc,
							type: 'error'
						});
						this.devicelistLoading = false;
						return;
					}
					this.dtotal = res.data.data.totalResult;
					this.deviceListData = res.data.data.records;
					this.devicelistLoading = false;
				}).catch((error) => {
					this.devicelistLoading = false;
				});
			},
			//绑定车辆数统计
			getSummaries(param) {
				const {
					columns,
					data
				} = param;
				const sums = [];
				sums[0] = "总共";
				sums[6] = data.length + "台 设备";
				return sums;
			},
			// 清空当前模糊查询
			clearAllThis() {
				this.filters.domSearch = [{
					select: ['licenseplatenum'],
					content: ''
				}] //显示页面的默认查询条件;
			},
			//查询清空
			clearAll() {
				this.filters.domSearch = [{
					select: [],
					content: ''
				}] //清空查询框;
			},
			// 引入车型车系表
			initModelBrand() {
				let para = {
					_viewName: "VW_VAS_WEB_VAS_VEHICLE_BRAND",
					showCount: 1000
				};
				getModelListInfo(para).then((res) => {
					res.data.data.records.forEach((res, index) => {
						this.carModelList.push({
							label: res.brand,
							value: {
								type: 'brand',
								value: res.brand,
								paraentIndex: 0,
								index: index
							},
							children: []
						});
					});
				});
			},
			//选择车辆颜色
			changeCarColorAdd(v) {
				if(typeof v != "object") return;
				this.addForm.colorname = v.color; //存colorname汉字
				this.addForm.color = v.color_rgb; //存color码
			},
			//选择车型查询颜色
			handleSelectModel(v) {
				// this.editForm.model = v.value;
				// this.editForm.color = '';
				this.addForm.model = v.value;
				this.addForm.color = '';
				let para = {
					_viewName: "VW_VAS_WEB_VAS_VEHICLE_COLOR",
					showCount: 1000,
					brand: v.brand,
					serious: v.serious,
					model: v.value
				};
				getModelListInfo(para).then((res) => {
					let carModelList = [];
					res.data.data.records.forEach((res, index) => {
						if(res.color) {
							res.color.split(";").forEach((color, index) => {
								carModelList.push({
									color: color,
									color_rgb: res.color_rgb.split(";")[index]
								});
							});
						}
					});
					this.carColor = carModelList;
				});
			},
			//车型选择
			handleItemChange(queryString, cb) {
				let para = {
						_viewName: "VW_VAS_WEB_VAS_VEHICLE_MODEL",
						showCount: 10000,
						model: queryString
					},
					ownerArray = [];
				getModelListInfo1(para).then((res) => {
					res.data.data.records.forEach(function(item, index) {
						ownerArray.push({
							value: item.model,
							brand: item.brand,
							serious: item.serious
						});
					});
					cb(ownerArray);
				});
			},
			// //车型选择
			//       handleItemChange(items){
			//         if(items.length == 0) return;
			//         let item = items[items.length-1];
			//         if(item.type == "brand"){
			//           let para = {
			//             _viewName:"VW_VAS_WEB_VAS_VEHICLE_SERIOUS",
			//             showCount:1000,
			//             brand:item.value
			//           };
			//           getModelListInfo(para).then((res) => {
			//             res.data.data.records.forEach((res,index)=>{
			//               this.carModelList[item.index].children.push(
			//                 {label:res.serious,value:{type:'serious',pv:res.brand,value:res.serious,pInd:item.index,index:index},children:[]}
			//                 );
			//             });
			//           });
			//         }
			//         //根据车系查询车型
			//         if(item.type == "serious"){
			//           let para = {
			//             _viewName:"VW_VAS_WEB_VAS_VEHICLE_MODEL",
			//             showCount:1000,
			//             brand:item.pv,
			//             serious:item.value
			//           };
			//           getModelListInfo(para).then((res) => {
			//             res.data.data.records.forEach((res,index)=>{
			//               this.carModelList[item.pInd].children[item.index].children.push(
			//               {label:res.model,value:{type:'model',ppv:res.brand,pv:res.serious,value:res.model,ppInd:item.pInd,pInd:item.index,index:index},children:[]
			//               });
			//             });
			//           });
			//         }
			//         //根据车型查颜色
			//         if(item.type == "model"){
			//           let para = {
			//             _viewName:"VW_VAS_WEB_VAS_VEHICLE_COLOR",
			//             showCount:1000,
			//             brand:item.ppv,
			//             serious:item.pv,
			//             model:item.value
			//           };
			//           this.addForm.model = item.value;
			//           getModelListInfo(para).then((res) => {
			//             res.data.data.records.forEach((res,index)=>{
			//               let colorList = [];
			//               if (res.color == undefined) {
			//               	console.log('暂无收录颜色');
			//               }else{
			//               	res.color.split(";").forEach((item,index)=>{
			// 	                let color = {};
			// 	                color.label = item;
			// 	                color.value = {type:"color",value:item,color_rgb:res.color_rgb.split(";")[index]};
			// 	                colorList.push(color);
			// 	          });
			// 	          this.carModelList[item.ppInd].children[item.pInd].children[item.index].children = colorList;
			//               }
			//             });
			//           });
			//         }
			//         if(item.type == "color"){
			//           this.addForm.colorname = item.value;
			//         }
			// },

			//设备状态显示转换
			statusFormat: function(row, col) {
				return row.STATUS || row.status == 'INSTO' ? '在库' : row.STATUS || row.status == 'INSTALL' ? '已安装' : row.STATUS || row.status == 'LOST' ? '报失' : row.STATUS || row.status == 'REPAIR' ? '维修' : row.STATUS || row.status == 'DAMAGE' ? '报废' : row.STATUS || row.status == 'ONWAY' ? '在途' : '';
			},
			// 车主姓名——搜索下拉
			querySearchName(queryString, cb) {
				let para = {
						name: queryString
					},
					ownerArray = [];
				getOwnerInfoList(para).then((res) => {
					res.data.data.records.forEach(function(item, index) {
						var moreInfo = ''; //声明变量，显示手机或身份证
						if(item.mobile == null) { //当手机为空时
							moreInfo = '身份证' + item.idcard; //显示身份证
						} else { //当手机号不为空时
							moreInfo = '手机' + item.mobile; //显示手机号
						}
						ownerArray.push({
							value: item.name + '(' + moreInfo + ')',
							id: item.ID,
							mobile: item.mobile
						});
					});
					cb(ownerArray);
				});
			},
			handleSelectName(item) {
				this.addForm.ownerid = item.id;
				// this.addForm.name = item.value;
				this.addForm.mobile = item.mobile;
			},
			/*车类型——下拉*/
			vehChange(r) {
				if(!r || this.vehlist.length > 0) return;
				this.vehLoading = true;
				getVehList().then((res) => {
					this.vehlist = res.data.data;
					this.vehLoading = false;
					console.log(this.vehlist);
				});
				
			},
			/*客户——下拉*/
			corpChange(r) {
				if(!r || this.corplist.length > 0) return;
				this.corpLoading = true;

				let para = {
					showCount: 1000,
				}
				getCorpNameList(para).then((res) => {
					this.corplist = res.data.data.records;
					this.corpLoading = false;
				});
			},
			/*银行——下拉*/
			corpChangeTwo(r) {
				if(!r || this.corptwolist.length > 0) return;
				this.corptwoLoading = true;

				let para = {
					corptype: 'BANK',
				}
				getCorpList(para).then((res) => {
					this.corptwolist = res.data.data.records;
					this.corptwoLoading = false;
				});
			},
			/*平台——下拉*/
			platChange(r) {
				if(!r || this.platlist.length > 0) return;
				this.platLoading = true;
				getPlatList().then((res) => {
					this.platlist = res.data.data.records;
					this.platLoading = false;
				});
			},
			//新增—— 平台名称选中时自动获取平台ip
			getIpAdd() {
				for(var i = 0; i < this.platlist.length; i++) {
					if(this.platlist[i].ID == this.addForm.platnameId) {
						this.addForm.platip = this.platlist[i].platip;
						this.addForm.platid = this.platlist[i].ID;
					}
				}
			},
			//获取保单列表
			handleQuery() {
				let para = {
					currentPage: this.currentPage,
					showCount: this.pageSize,
					isdelete: this.filters.isdelete,
				};
				this.listLoading = true;
				// getCorporateInfoList(para).then((res) => {
				// 	this.total = res.data.data.totalResult;
				// 	this.listData = res.data.data.records;
				// 	this.listLoading = false;
				// }).catch((error) => {
				//                this.listLoading = false;
				// });
			},

			//新增
			addSubmit() {
				this.$refs.addForm.validate((valid) => {
					if(valid) {
						let para = {
							licenseplatenum: this.addForm.licenseplatenum,
							vin: this.addForm.vin,
							enginenum: this.addForm.enginenum,
							price: this.addForm.price,
							model: this.addForm.model,
							color: this.addForm.color,
							colorname: this.addForm.colorname,
							firstregisterdate: this.addForm.firstregisterdate,
							vehicletype: this.addForm.vehicletype,
							corpid: this.addForm.corpname,
							receivingbankid: this.addForm.bankname,
							hastheftinsurance: parseInt(this.addForm.hastheftinsurance),
							generalproductcount: this.addForm.generalproductcount,
							yearsofservice: this.addForm.yearsofservice,
							loanenddate: this.addForm.loanenddate,
							isdelete: parseInt(this.addForm.isdelete),
							onlineCheck: this.prodDataID,
							ownerid: this.addForm.ownerid,
							name: this.addForm.name,
							mobile: this.addForm.mobile,
							platid: this.addForm.platnameId,
						}
						addCorporateInfo(para).then((res) => {
							if(res.data.result.desc != 'success') {
								this.$message({
									message: '数据重复！',
									type: 'warning'
								});
							} else {
								this.$message({
									message: '新增成功！',
									type: 'success'
								});
							}
							this.$refs['addForm'].resetFields();
							this.handleQuery();
						});
					}
				});
			},
		},
		created() {
			this.initModelBrand();
		},
		mounted() {
			this.handleQuery();
		},

	}
</script>

<style>
	.layout {
		display: flex;
	}
	
	.step-btn {
		position: fixed;
		right: 25px;
		bottom: 60px;
	}
	
	.step-form {
		margin-top: 35px;
		margin-left: 100px;
		width: 80%;
	}
	
	.center {
		font-size: 25px;
		color: #16A085;
		position: absolute;
		top: calc(5%);
		left: calc(50%);
	}
	
	.center i {
		font-size: 40px;
		color: #16A085;
		position: absolute;
		top: -10px;
		left: -50px;
	}
</style>